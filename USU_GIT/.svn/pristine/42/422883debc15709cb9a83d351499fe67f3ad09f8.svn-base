package kr.ac.usu.classroom.controller;

import java.util.List;

import javax.inject.Inject;

import org.springframework.remoting.RemoteTimeoutException;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;

import kr.ac.usu.classroom.service.ProfessorClassroomService;
import kr.ac.usu.classroom.vo.ClassroomBoardVO;
import kr.ac.usu.classroom.vo.TestQuestionVO;
import kr.ac.usu.classroom.vo.TestVO;
import kr.ac.usu.common.mapper.CommonOptionsMapper;
import kr.ac.usu.lecture.vo.LectureVO;
import kr.ac.usu.user.vo.ComCodeVO;
import lombok.extern.slf4j.Slf4j;
/**
 * 
 * @author PC-21
 *
 * @author 김재성
 * @since 2023. 11. 26.
 * @version 1.0
 * @see javax.servlet.http.HttpServlet 
 * <pre>
 * [[개정이력(Modification Information)]]
 *    수정일           수정자             수정내용
 * -----------     --------    ----------------------
 * 2023.11.26.       김재성       최초작성
 * 2023.11.27.       김재성       URL 맵핑 및 강의목록 출력
 * 2023.11.28.       김재성       엑셀 업로드
 * 2023.11.29.       김재성       자료파일 내용 업로드
 * Copyright (c) 2023 by DDIT All right reserved
 * </pre>
 */
@Slf4j
@Controller
@RequestMapping("/professor/classroom")
public class ProfessorClassroomController {
	
	@Inject
	private ProfessorClassroomService service;
	
	@Inject
	private CommonOptionsMapper commonMapper;
	
	//클래스룸 베이스 UI
	@GetMapping("/classroomBaseUI")
	public String classroomBaseUI(
			Model model
			,Authentication principal
	) {
		String prfsorNo = principal.getName();
		List<LectureVO> lectureList =service.retrieveClassroomProfessorLecture(prfsorNo);
		
		log.info("클래스룸 메뉴 클릭시 가져오는 강의관련 데이터 : {}",lectureList);
		
		model.addAttribute("lectureList",lectureList);
		
		return "professor/classroom/professorClassroomBaseUI";
	}
	
	// 클래스룸 페이지 시험 Tab View
	@GetMapping("/test/{lctreNo}")
	public String classroomTestTabUI(
			Model model
			,@PathVariable String lctreNo
	) {
		
		model.addAttribute("lctreNo", lctreNo);
		
		return "ajax/professor/classroom/professorClassroomTestView";
	}
	
	// 클래스룸 페이지 시험 Tab add View 
	@GetMapping("/addTest/{lctreNo}")
	public String classroomAddTestTabUI(
			Model model
			,@PathVariable String lctreNo
	) {
		List<ComCodeVO> testSe = commonMapper.getComeCodeList("SEC021");
		
		model.addAttribute("testSe",testSe);
		model.addAttribute("lctreNo", lctreNo);
		return "ajax/professor/classroom/professorClassroomAddTestView";
	}
	
	// 클래스룸 페이지 과제 Tab View 
	@GetMapping("/assignment/{lctreNo}")
	public String classroomAssignmentTabUI(
			Model model
			,@PathVariable String lctreNo
	) {
		List<ComCodeVO> crSe = commonMapper.getComeCodeList("SEC020");
		
		log.info("crSe 클래스룸 구분 코드 오는지 확인 : {}",crSe);
		
		model.addAttribute("crSe",crSe);
		model.addAttribute("lctreNo",lctreNo);
		
		return "ajax/professor/classroom/professorClassroomAssignmentView";
	}
	
	//클래스룸 페이지 자료 Tab View
	@GetMapping("/data/{lctreNo}")
	public String classroomDataTabUI(
			Model model
			,@PathVariable String lctreNo
	
	) {
		List<ComCodeVO> crSe = commonMapper.getComeCodeList("SEC020");
		
		log.info("crSe 클래스룸 구분 코드 오는지 확인 : {}",crSe);
		
		model.addAttribute("crSe",crSe);
		model.addAttribute("lctreNo",lctreNo);
		
		return "ajax/professor/classroom/professorClassroomDataView";
	}
	
	//클래스룸 온라인강의 Tab View
	@GetMapping("/onlineLecture/{lctreNo}")
	public String classroomLectureOnlineTabUI(
			Model model
			,@PathVariable String lctreNo			
	) {
		model.addAttribute("lctreNo",lctreNo);
		return "ajax/professor/classroom/professorClassroomOnlineLectureView";
	}
	
	//------------------------------- Tab View End -----------------------------------------
	
	
	//시험출제 등록
	@PostMapping("/test/new")
	public String excelUploadTestAnswer(
			Model model
			, MultipartFile testFile
			, MultipartFile answerFile 
			, TestQuestionVO test
	)throws Exception{
		log.info("넘어온 파라미터 test : {}",test);
		if(answerFile == null || answerFile.isEmpty()) {
			throw new RemoteTimeoutException("엑셀파일을 선택해주세요.");
		}
		
		test.setTestQustTime((test.getTestQustTime() * 60));
		
		service.createClassRoomTest(testFile, answerFile, test);
		
//		log.info("시험지 파일 : {}", testFile);
//		log.info("답안 파일 : {}", answerFile);
		model.addAttribute("result", true);
		return "jsonView";
		
	}
	
	//과제 등록 
	@PostMapping("/assignment/new")
	public String classroomAssignmentUpload(
			Model model
			, MultipartFile assignmentFile
			, ClassroomBoardVO classroomBoard
			, Authentication principle
	)throws Exception {
		
		log.info("classroomBoard 넘어온 값 확인 : {}",classroomBoard);
		log.info("넘어온 파라미터 attachingFile 확인 ! : {}",assignmentFile);
		if(assignmentFile == null || assignmentFile.isEmpty()) {
			throw new RemoteTimeoutException("과제파일을 선택해주세요.");
		}
		
		//작성자
		String crWriter = principle.getName();
		
		classroomBoard.setCrWrter(crWriter);
		
		service.createClassRoomBoard(assignmentFile,classroomBoard);
		
		model.addAttribute("result", true);
		
		log.info("assignmentFile 과제파일 오는지 확인! {}",assignmentFile);
		
		
		return"jsonView";
	}
	
	//자료 등록 
	@PostMapping("/data/new")
	public String classroomDataUpload(
			Model model
			, MultipartFile dataFile
			, ClassroomBoardVO classroomBoard
			, Authentication principle
			)throws Exception {
		
		log.info("classroomBoard 넘어온 값 확인 : {}",classroomBoard);
		log.info("넘어온 파라미터 attachingFile 확인 ! : {}",dataFile);
		if(dataFile == null || dataFile.isEmpty()) {
			throw new RemoteTimeoutException("자료파일을 선택해주세요.");
		}
		
		//작성자
		String crWriter = principle.getName();
		
		classroomBoard.setCrWrter(crWriter);
		
		service.createClassRoomBoard(dataFile,classroomBoard);
		
		model.addAttribute("result", true);
		
		log.info("assignmentFile 과제파일 오는지 확인! {}",dataFile);
		
		return"jsonView";
	}
	
//	//온라인강의 등록 
//	@PostMapping("/onlineLecture/new")
//	public String classroomOnlineLectureUpload(
//			Model model
//			, MultipartFile onlineLectureFile
//			, ClassroomBoardVO classroomBoard
//			, Authentication principle
//			)throws Exception {
		
//		log.info("classroomBoard 넘어온 값 확인 : {}",classroomBoard);
//		log.info("넘어온 파라미터 attachingFile 확인 ! : {}",onlineLectureFile);
//		if(onlineLectureFile == null || onlineLectureFile.isEmpty()) {
//			throw new RemoteTimeoutException("영상파일을 선택해주세요.");
//		}
		
		//작성자
//		String crWriter = principle.getName();
		
//		classroomBoard.setCrWrter(crWriter);
		
//		service.createClassRoomBoard(onlineLectureFile,classroomBoard);
		
//		model.addAttribute("result", true);
//		
//		log.info("assignmentFile 과제파일 오는지 확인! {}",dataFile);
//		
//		return"jsonView";
//	}
	
	//--------------------------------- Insert and Upload End -------------------------------
	
	@GetMapping("/test/ajax/testList/{lctreNo}")
	public String classroomTestList(
			Model model
			,@PathVariable String lctreNo
			,Authentication principle
	) {
		String prfsorNo = principle.getName();
		
		TestQuestionVO testQuestionVO = new TestQuestionVO();
		
		testQuestionVO.setLctreNo(lctreNo);
		testQuestionVO.setPrfsorNo(prfsorNo);
		
		List<TestQuestionVO> testList =service.retrieveClassRoomTestList(testQuestionVO);
		
		model.addAttribute("testList",testList);
		
		return "jsonView";
	}
	
	
	

}