/**
 * </pre>
 * @author 김재성

 * @since 2023. 11. 28.
 * @version 1.0
 * <pre>
 * [[개정이력(Modification Information)]]
 * 	  수정일    		    수정자       수정내용
 * --------------     --------    ----------------------
 * 2023. 11. 28.     	김재성       최초작성
 * 2023. 11. 30.     	김재성       과제등록 목록 리스트 
 * 2023. 12. 01.     	김재성       과제등록 상세내역  
 * Copyright (c) 2023 by DDIT All right reserved
 * </pre>
 */ 
 $(function(){


//  과제등록 목록 리스트 출력--------------------------------------------------------------

let lctreNo = $("#selectLctreNoUsingData").val();
console.log("targetLectureNo 나와라 제발",lctreNo);

$.ajax({
    type:"get",
    url:`/professor/classroom/test/ajax/assignmentList/${lctreNo}`,
    dataType:"json",
    success: function(rslt){
		 let assignmentList = rslt.assignmentList;

		console.log("클래스룸 과제 목록",assignmentList);
		 
		 let listTag =""; 
			if(assignmentList.length > 0){
				$.each(assignmentList, function(idx, assignmentVoList){
					//console.log("클래스룸 과제 목록",assignmentVoList);
					
					let str =  assignmentVoList.lecture.semstrSe;
					let year = str.substr(0,4);
					let semstr = str.substr(4,1);
					listTag += `
						<tr>
				            <td>${year}년</td>
				            <td>${semstr}학기</td>
				            <td>${assignmentVoList.crTitle}</td>
							<td>${assignmentVoList.lecture.lctreSe}</td>
				            <td>${assignmentVoList.lecture.complSe}</td>
				            <td>${assignmentVoList.crDate}</td>
						<td>
							<button type="button" class="btn pro_btn_01 small_btn assignmentInfoBtn" 
							data-cr-no=${assignmentVoList.crNo} data-toggle="modal" data-target="">상세보기</button>
						</td>
						</tr>
				`;
				});
			}else{
				listTag += `
					<tr>
						<td colspan="7" style="text-align: center;">과제등록 목록이 없습니다.</td>
					</tr>
				`;
			}
			$("#assingmentListBody").html(listTag);	
    },
    error: function(xhr){
        console.log(xhr.status);
    }
});

   // ----------------------------------- 과제등록 정보 View Modal ----------------------------------
	
	$(document).on("click",".assignmentInfoBtn", function(event) {
		//event.preventDefault();
	    $("#assignmentInfoViewModal").modal('show');
		
		let crNo = $(this).data("crNo");
		console.log("클래스룸 번호 확인 : ",crNo);
		
		$.ajax({
			url: `/professor/classroom/assignment/view/${crNo}`,
			type: "GET",
			contentType: false,
			processData : false,
			//data: formData,
			dataType: "html",
			success: function(rslt) {
				$(".assignmentInfoViewModalbody").html(rslt);	
				
			},
			error: function(xhr, err, status) {
				// 에러 시 수행할 작업
				console.error(err);
				alert(xhr.status);
			}
		});
	});
	
	// 과제등록 상세내역  모달 닫기 ---------------------
	$("#assignmentInfoViewModalClose").click(function(){
		   $("#assignmentInfoViewModal").modal('hide');
	});
	
        
   	// 과제추가 모달 ------------------------------------------------
		$("#addAssignmentModalViewBtn").on("click", function() {
		    $("#addAssignmentBtnModal").modal('show');
		});
		
		$("#addAssignmentBtnModalClose").on("click",function(){
		    $("#addAssignmentBtnModal").modal('hide');
		});
		
		$("#addAssignmentBtnModal").on('hidden.bs.modal', function () {
		    $("#assignmentCrTitle").val('');
		    $("#assignmentCrCn").val('');
			$("#assignmentCrSe").val("-1");
			$("#assignmentFile").val("");
		});
//--------------------------------------------------------------------------------------------------------
	// 과제 업로드 작업
	$(document).on("submit","#addAssignmentClassroomForm",function(event){
		event.preventDefault();
		
		console.log('잘막힘');
	    let formData = new FormData($("#addAssignmentClassroomForm")[0]);
		
		console.log("내용 왔는지 확인 !",formData.get("crCn"));
		
		let assignmentFile = $("#assignmentFile");
		console.log(assignmentFile);
		let FileName = assignmentFile[0].files[0].name;
		console.log(FileName);
		
		if (assignmentFile == "" || assignmentFile == null) {
				//alert("답안파일을 선택해주세요.");
				Swal.fire({
				  icon: "error",
				  title: "자료파일을 선택해주세요.",
				  showConfirmButton: false,
				  timer: 2000
				});
				return false;
			}
		
		Swal.fire({
		  title: "등록 하시겠습니까?",
		  icon: "question",
		  showCancelButton: true,
		  confirmButtonColor: "#3085d6",
		  cancelButtonColor: "#d33",
		  confirmButtonText: "네",
		  cancelButtonText: "아니오"
		}).then((result) => {
			if (result.isConfirmed) {
				$.ajax({
					url: "/professor/classroom/assignment/new",
					type: "POST",
					contentType: false,
					processData : false,
					data: formData,
					dataType: "json",
					success: function(rslt) {
						let icon = null;
						let title = null;
						if(rslt.result){
							title = "성공했습니다!";
							icon = "success";
						}else{
							title = "실패했습니다!";
							icon = "error";
						}
						Swal.fire({
							title: title,
							icon: icon
						}).then((res)=>{
							if(rslt.result){
								$("#addAssignmentBtnModal").modal('hide');
								$('addAssignmentBtnModalClose').trigger('click');
								$('#classroomLectureChoiceSelect').trigger('change');
								$(".modal-backdrop").remove();
							}
						});
						
					},
					error: function(xhr, err, status) {
						// 에러 시 수행할 작업
						console.error(err);
						alert(xhr.status);
					}
				});
			}
		});
		/*
		// Ajax를 사용하여 데이터 전송
		$.ajax({
			url: "/professor/classroom/assignment/new",
			type: "POST",
			contentType: false,
			processData : false,
			data: formData,
			dataType: "json",
			success: function(rslt) {
				let icon = null;
				let title = null;
				if(rslt.result){
					title = "성공했습니다!";
					icon = "success";
				}else{
					title = "실패했습니다!";
					icon = "error";
				}
				Swal.fire({
					title: title,
					icon: icon
				}).then((res)=>{
					if(rslt.result){
						$('#classroomLectureChoiceSelect').trigger('change');
						$('#addAssignmentBtnModalClose').trigger('click');
					}
				});
				
				
				
				if(rslt.result){
				var timerInterval;
					Swal.fire({
						title: "과제 등록 성공!",
						html: "과제 등록 성공!",
						timer: 1500,
						timerProgressBar: true,
						didOpen: () => {
							Swal.showLoading();
							const timer = Swal.getPopup().querySelector("b");
							timerInterval = setInterval(() => {
							timer.textContent = `${Swal.getTimerLeft()}`;
							}, 100);
						},
						willClose: () => {
							clearInterval(timerInterval);
						}
					}).then((result) => {
						$('#classroomLectureChoiceSelect').trigger('change');
						$('#addAssignmentBtnModalClose').trigger('click');
						
					});
				}else{
					var timerInterval;
					Swal.fire({
						title: "과제 등록 실패",
						html: "과제 등록 실패!",
						timer: 1500,
						timerProgressBar: true,
						didOpen: () => {
							Swal.showLoading();
							const timer = Swal.getPopup().querySelector("b");
							timerInterval = setInterval(() => {
								timer.textContent = `${Swal.getTimerLeft()}`;
							}, 100);
						},
						willClose: () => {
							clearInterval(timerInterval);
						}
					}).then((result) => {
					});
				}
				
			},
			error: function(xhr, err, status) {
				// 에러 시 수행할 작업
				console.error(err);
				alert(xhr.status);
			}
		});*/
	});
 });
	

//엑셀 파일 업로드 ----------------------------------------------------
function checkFileType(fileName,targetMime) {
	if(fileName.indexOf(targetMime) == -1){
		return false;
	}else{
		return true;
	}
}



// 과제 일괄 입력
function assignmentAutoInput(){
	
	let assignmentCrTitle = "객체지향 프로그래밍 기초 익히기";
	let assignmentCrCn =`
목표

이 과제의 목표는 객체지향 프로그래밍(OOP)의 기초 개념을 익히고,
자바로 간단한 클래스를 정의하여 활용하는 것입니다.

과제 요구사항

클래스 설계

학생(Student) 클래스를 정의합니다. 이 클래스는 학생의 학번, 이름, 성적 등을 저장할 수 있어야 합니다.
메인 클래스에서 학생 객체를 최소 3개 생성합니다.
생성한 학생 객체들의 정보를 출력하여 확인합니다.

학생 클래스에는 학생의 성적을 계산하는 메서드를 추가합니다. 성적은 간단한 평균이나 학점으로 표현합니다.

학생 클래스를 확장하여 석사 학생(MasterStudent) 클래스를 만들어 봅니다.
석사 학생 클래스에는 추가적인 정보나 메서드를 정의합니다.

제출하실 때 주의 깊게 코드를 리뷰하고 실행 결과를 확인해보시기 바랍니다.
`;
	
	$("#assignmentCrTitle").val(assignmentCrTitle);
	$("#assignmentCrCn").val(assignmentCrCn);
}




