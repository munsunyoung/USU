package kr.ac.usu.lecture.controller;


import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.ac.usu.common.mapper.CommonOptionsMapper;
import kr.ac.usu.course.vo.CourseVO;
import kr.ac.usu.facilities.vo.BuildingVO;
import kr.ac.usu.facilities.vo.CollegeVO;
import kr.ac.usu.facilities.vo.FacilitiesVO;
import kr.ac.usu.lecture.service.ProfessorLecturetService;
import kr.ac.usu.lecture.vo.LectureRequestVO;
import kr.ac.usu.lecture.vo.LectureVO;
import kr.ac.usu.paging.BootstrapPaginationRenderer;
import kr.ac.usu.paging.vo.PaginationInfo;
import kr.ac.usu.paging.vo.SearchVO;
import kr.ac.usu.schoolaffairsschedule.vo.SemesterVO;
import kr.ac.usu.subject.vo.SubjectVO;
import kr.ac.usu.user.vo.ComCodeVO;
import kr.ac.usu.user.vo.StudentVO;
import lombok.extern.slf4j.Slf4j;

/**
 * 
 * @author PC-25
 *
 * @author 이재혁
 * @since 2023. 11. 7.
 * @version 1.0
 * @see javax.servlet.http.HttpServlet 
 * <pre>
 * [[개정이력(Modification Information)]]
 * 수정일            수정자           수정내용
 * --------       --------    ----------------------
 * 2023. 11. 7.     이재혁     최초작성
 * 2023. 11.10.     김재성	  수강중인 강의 목록 불러오기
 * 2023. 11.13.     김재성	  수강중인 강의 ajax 비동기 요청
 * 2023. 11.17.     김재성    교수 강의 수강학생 목록 조회 메서드 생성
 * 2023. 11.22.     김재성    교수 강의 개설 신청 Form html 작성
 * 2023. 11.23.     김재성    교수 강의 개설 신청 select 절 리스트
 * 2023. 11.24.     김재성    교수 강의 개설 신청목록 페이징 리스트
 * Copyright (c) 2023 by DDIT All right reserved
 * </pre>
 */
@Slf4j
@Controller
@RequestMapping("/professor/lecture")
public class ProfessorLectureController {
	@Inject
	private ProfessorLecturetService service;
	@Inject
	private CommonOptionsMapper comOptionMapper;
	
	//강의목록 UI
	@GetMapping("/lectureListUI")
	public String LectureListUI() {
		
		return "professor/lecture/professorLectureUI";
	}
	
	//비동기식 검색조건 강의목록 리스트
	@GetMapping("/ajax/lectureList")
//	@ResponseBody
//	public PaginationInfo<LectureVO> lectureList(
	public String lectureList(
			@ModelAttribute("simpleCondition") SearchVO simpleCondition
			, @RequestParam(value="page", required = false, defaultValue = "1") int currentPage
			, Model model
			, Authentication principle
//			   SearchVO simpleCondition
//			,  int currentPage
	) {
		
		PaginationInfo<LectureVO> paging = new PaginationInfo<>(10,5);
		paging.setSimpleCondition(simpleCondition);
		paging.setCurrentPage(currentPage);
		
		String prfsorNo = principle.getName();
		LectureVO lectureVO = new LectureVO();
		lectureVO.setPrfsorNo(prfsorNo);
		
		paging.setDetailCondition(lectureVO);
		
		log.info("검색 받아오는 값 : - simpleCondition : {}",simpleCondition);
		
		service.retrieveLectureList(paging);
		
		paging.setRenderer(new BootstrapPaginationRenderer());
		
		model.addAttribute("paging", paging);
		
		
		
//		return paging;
		return "jsonView";
	}
	
	// 교수강의 수강학생 목록 리스트
	@RequestMapping(value="/ajax/lectureStudentListView", method = RequestMethod.GET)
	public String lectureStudentListView(
			@RequestParam("lctreNo") String lctreNo
			, Model model
			) {
		
		log.info("교과목번호 가져온 값 : {}", lctreNo);
		
		List<StudentVO> studentList = service.retrieveLectureStudentList(lctreNo);
		
		log.info("studentList : {}" ,studentList);
		
		model.addAttribute("studentList",studentList);
		
		return "ajax/professor/lecture/professorLectureStudentListView";
	}
	
	
	//강의 개설 신청 UI 페이지 이동 메소드
	@GetMapping("/newLectureRequestUI")
	public String newLectureRequest(
			Model model
	) {
		// 이수 구분
		String compleComCodeGrp = "SEC014";
		List<ComCodeVO> compleSe = comOptionMapper.getComeCodeList(compleComCodeGrp);	
		model.addAttribute("compleSe",compleSe);
		
		// 학기 구분
		String semstrComCodeGrp = "SEC018";
		List<ComCodeVO> semstrSe = comOptionMapper.getComeCodeList(semstrComCodeGrp);	
		model.addAttribute("semstrSe",semstrSe);
		
		// 강의 형태
		String lctreComCodeGrp = "SEC015";
		List<ComCodeVO> lctreSe = comOptionMapper.getComeCodeList(lctreComCodeGrp);	
		model.addAttribute("lctreSe",lctreSe);
		
		//건물 구분
		List<BuildingVO> building = comOptionMapper.getBuildingList();
		model.addAttribute("building",building);
		
		// 강의 형태
		String tmtbComCodeGrp = "SEC011";
		List<ComCodeVO> tmtbSe = comOptionMapper.getComeCodeList(tmtbComCodeGrp);	
		model.addAttribute("tmtbSe",tmtbSe);
		
		//단과대학 구분
		List<CollegeVO> college = comOptionMapper.getCollegeList();
		model.addAttribute("college",college);
		
		return"professor/lecture/professorLectureRequestUI";
	}
	
	// 단과대학 선택 별 학과 리스트
	@ResponseBody
	@GetMapping("/subjectList")
	public List<SubjectVO> subjectList(
		@RequestParam(value="clgNo",defaultValue = "null" ) String clgNo
		,Model model
	) {
		log.info("프론트 보내온 매개변수 : {}",clgNo);
		//학과 구분
		List<SubjectVO> subject = comOptionMapper.getSubjectList(clgNo);
		log.info("돌아오는 학과 리스트 확인 : {}",subject);
		
		return subject;
	}
	
	// 학과 선택 별 교과목 리스트
	@ResponseBody
	@GetMapping("/courseList")
	public List<CourseVO> courseList(
			@RequestParam(value="subjctNo",defaultValue = "null" ) String subjctNo
			,Model model
			) {
		log.info("&&&&&&&&&&&&&프론트 보내온 매개변수 : {}",subjctNo);
		//학과 구분
		List<CourseVO> course = comOptionMapper.getCourseList(subjctNo);
		log.info("&&&&&&&&&&&&&&돌아오는 학과 리스트 확인 : {}",course);
		
		return course;
	}
	
	// 건물 선택별 강의실 선택 리스트
	@ResponseBody
	@GetMapping("/facilitiesList")
	public List<FacilitiesVO> facilitiesList(
			@RequestParam(value="buldNo",defaultValue = "null" ) String buldNo
			,Model model
			) {
		log.info("&&&&&&&&&&&&&&&&&&&&&&&프론트 보내온 매개변수 : {}",buldNo);
		//학과 구분
		List<FacilitiesVO> facilities = comOptionMapper.getFacilitiesList(buldNo);
		log.info("&&&&&&&&&&&&&&&&&&&돌아오는 학과 리스트 확인 : {}",facilities);
		
		return facilities;
	}
	
	// 강의 개설 신청 ->( 강의개설신청, 강의계획서, 강의평가기준, 강의개설정보)
	@ResponseBody
	@PostMapping("/newLectureRequest")
	public String newLectureRequest(LectureRequestVO lectureRequestVO) {
		/*
		 lectureRequestVO : LectureRequestVO(rnum=0, lctreReqstNo=null, lctreReqstDate=null, prfsorNo=null, courseNo=D008, complSe=02, semstrSe=04, confmSe=null, 
		 lctreReqstReturn=null, lctreSe=01, fcltsNo=CC203, buldNo=CC, professor=null, course=null, 
		 
		 lectureRequestInfoVOList=[
			 LectureRequestInfoVO(tmtbSe=B2, lctreReqstNo=null, fcltsNo=null, buldNo=null, facilities=null, building=null), 
			 LectureRequestInfoVO(tmtbSe=B8, lctreReqstNo=null, fcltsNo=null, buldNo=null, facilities=null, building=null), 
			 LectureRequestInfoVO(tmtbSe=A9, lctreReqstNo=null, fcltsNo=null, buldNo=null, facilities=null, building=null)], 
		 
		 lectureActionPlanVO=LectureActionPlanVO(lctreAcnutnoNo=null, lctreAcnutnoGoal=강의목표 및 개요, lctreAcnutnoPlan=주차별 강의계획, lctreAcnutnoRefer=참고사항, 
			 lectureEvaluationStandardVOList=[
				 LectureEvaluationStandardVO(scoreSe=01, lctreAcnutnoNo=null, lctreEvlStdrReflct=10, lecturerequest=null), 
				 LectureEvaluationStandardVO(scoreSe=02, lctreAcnutnoNo=null, lctreEvlStdrReflct=20, lecturerequest=null), 
				 LectureEvaluationStandardVO(scoreSe=03, lctreAcnutnoNo=null, lctreEvlStdrReflct=30, lecturerequest=null), 
				 LectureEvaluationStandardVO(scoreSe=04, lctreAcnutnoNo=null, lctreEvlStdrReflct=40, lecturerequest=null)]), 
		 
		 facilities=null, building=null)
		 */
		log.info("newLectureRequest->lectureRequestVO : " + lectureRequestVO);
		
		int result = this.service.newLectureRequest(lectureRequestVO);
		log.info("newLectureRequest->result : " + result);
		
		return "success";
	}
	
	//비동기식 검색조건 강의목록 리스트
	@GetMapping("/ajax/lectureRequestList")
	public String lectureRequestList(
			@ModelAttribute("simpleCondition") SearchVO simpleCondition
			, @RequestParam(value="page", required = false, defaultValue = "1") int currentPage
			, Model model
			, Authentication principle
	) {
		PaginationInfo<LectureRequestVO> paging = new PaginationInfo<>(10,5);
		paging.setSimpleCondition(simpleCondition);
		paging.setCurrentPage(currentPage);
		
		String prfsorNo = principle.getName();
		LectureRequestVO lectureRequsetVO = new LectureRequestVO();
		lectureRequsetVO.setPrfsorNo(prfsorNo);
		
		paging.setDetailCondition(lectureRequsetVO);
		
		log.info("검색 받아오는 값 : - simpleCondition : {}",simpleCondition);
		
		service.retrieveLectureRequestList(paging);
		
		paging.setRenderer(new BootstrapPaginationRenderer());
		
		model.addAttribute("paging", paging);
		
		return "jsonView";
	}
	
	// 강의 개설 신청 상세 조회
	@GetMapping("/ajax/lectureRequestView")
	public String professorLectureRequestView(
			@RequestParam("lctreReqstNo") String lctreReqstNo
			, Model model
			, Authentication principal
	) {
		
		log.info("신청번호 값 유무 확인 : {}", lctreReqstNo);
		String prfsorNo = principal.getName();
		
		
		LectureRequestVO lectureRequest = new LectureRequestVO();
		
		lectureRequest.setLctreReqstNo(lctreReqstNo);
		lectureRequest.setPrfsorNo(prfsorNo);
		
		LectureRequestVO lectureRequestView = service.retrieveLectureRequestView(lectureRequest);
		
		log.info("studentList : {}" ,lectureRequestView);
		
		model.addAttribute("lectureRequestView",lectureRequestView);
		
		return "ajax/professor/lecture/professorLectureRequestView";
	}
	
	/*[LectureRequestVO
	 * (rnum=1, lctreReqstNo=RF00423201, lctreReqstDate=230715, 
	prfsorNo=00000106, courseNo=F004, complSe=전공필수, semstrSe=20232, confmSe=승인 완료, 
	lctreReqstReturn=null, lctreSe=대면, fcltsNo=FF104, buldNo=FF, professor=ProfessorVO(rnum=3, 
	prfsorNo=00000106, prfsorNm=이병철, prfsorPassword=null, prfsorIhidnum1=null, prfsorIhidnum2=null,
	prfsorZip=null, prfsorAdres1=null, prfsorAdres2=null, prfsorTelno=null, prfsorEmplmn=null, 
	prfsorRetire=null, prfsorEmplynForm=교수 정규직, prfsorNlty=null, sexdstnSe=null, subjctNo=null,
	atchFileNo=null, professorImg=null, subject=null),
	 
	course=CourseVO(rnum=3, clgNo=null,
	subjctNo=null, clgNm=null, subjctNm=국어교육과, subjctTelno=042-479-1260, buldNm=교육관,
	fcltsNm=104호, courseNo=F004, courseNm=유아안전교육, coursePnt=3, complSe=전공필수, 
	courseRequest=null), 
	lectureRequestInfoVOList=[LectureRequestInfoVO(tmtbSe=null,
	 lctreReqstNo=RF00423201, fcltsNo=FF104, buldNo=FF, facilities=null, building=null)], 
	 
	 lectureActionPlanVO=LectureActionPlanVO(lctreAcnutnoNo=null, lctreAcnutnoGoal=테스트용강의목표, 
	 lctreAcnutnoPlan=테스트용 강의계획입니다 더미데이터에용, lctreAcnutnoRefer=참고해야지 뭐, 
	 
	 lectureEvaluationStandardVOList=[LectureEvaluationStandardVO(scoreSe=과제,
	 lctreAcnutnoNo=null, lctreEvlStdrReflct=10, lecturerequest=null)]),
	 
	 facilities=[FacilitiesVO(rnum=1, fcltsNo=FF104, fcltsNm=104호, fcltsNmpr=null,
	 fcltsPurps=강의실, buldNo=FF, prfsorNo=00000106, building=null, facilitiesTimetable=null,
	 professor=null),
	 
	  FacilitiesVO(rnum=3, fcltsNo=FF104, fcltsNm=104호, fcltsNmpr=null,
	 fcltsPurps=강의실, buldNo=FF, prfsorNo=00000106, building=null, facilitiesTimetable=null,
	 professor=null)], 
	 
	 building=BuildingVO(buldNo=FF, buldNm=교육관, clgNo=null, college=null,
     facilities=null)), 
	*/
}
